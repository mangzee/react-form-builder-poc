This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-12-24T08:43:29.184Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
.gitignore
package.json
public/index.html
public/manifest.json
public/robots.txt
README.md
src/App.css
src/App.js
src/App.test.js
src/index.css
src/index.js
src/logo.svg
src/reportWebVitals.js
src/routes/FormBuilder.jsx
src/routes/FormFill.jsx
src/setupTests.js

================================================================
Repository Files
================================================================

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*

================
File: package.json
================
{
  "name": "form-builder-demo",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@dnd-kit/core": "^6.3.1",
    "@dnd-kit/sortable": "^10.0.0",
    "@dnd-kit/utilities": "^3.2.2",
    "cra-template": "1.2.0",
    "react": "^18.0.0",
    "react-dom": "^18.0.0",
    "react-router-dom": "^7.1.1",
    "react-scripts": "5.0.1",
    "uuid": "^11.0.3",
    "web-vitals": "^4.2.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}

================
File: public/index.html
================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

================
File: public/manifest.json
================
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

================
File: public/robots.txt
================
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

================
File: README.md
================
# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in your browser.

The page will reload when you make changes.\
You may also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can't go back!**

If you aren't satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you're on your own.

You don't have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn't feel obligated to use this feature. However we understand that this tool wouldn't be useful if you couldn't customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

### Code Splitting

This section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)

### Analyzing the Bundle Size

This section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)

### Making a Progressive Web App

This section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)

### Advanced Configuration

This section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)

### Deployment

This section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)

### `npm run build` fails to minify

This section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)

================
File: src/App.css
================
.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

================
File: src/App.js
================
// src/App.js
import React from 'react';
import { BrowserRouter, Routes, Route, Link } from 'react-router-dom';
import FormBuilder from './routes/FormBuilder';
import FormFill from './routes/FormFill';

function App() {
  return (
    <BrowserRouter>
      <nav style={{ padding: '1rem' }}>
        <Link to="/build" style={{ marginRight: '1rem' }}>
          Create Form
        </Link>
      </nav>

      <Routes>
        <Route path="/build" element={<FormBuilder />} />
        <Route path="/forms/:id" element={<FormFill />} />
      </Routes>
    </BrowserRouter>
  );
}

export default App;

================
File: src/App.test.js
================
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

================
File: src/index.css
================
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

================
File: src/index.js
================
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();

================
File: src/logo.svg
================
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3"><g fill="#61DAFB"><path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/><circle cx="420.9" cy="296.5" r="45.7"/><path d="M520.5 78.1z"/></g></svg>

================
File: src/reportWebVitals.js
================
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

================
File: src/routes/FormBuilder.jsx
================
// src/routes/FormBuilder.jsx
import React, { useState } from 'react';
import { DndContext, closestCenter } from '@dnd-kit/core';
import {
  SortableContext,
  verticalListSortingStrategy,
  useSortable,
  arrayMove,
} from '@dnd-kit/sortable';
import { v4 as uuidv4 } from 'uuid';

//
// Available question types (including "file")
//
const questionTypes = [
  { type: 'text', label: 'Short Text' },
  { type: 'textarea', label: 'Long Text' },
  { type: 'select', label: 'Multiple Choice' },
  { type: 'file', label: 'File Upload' },
];

//
// The main FormBuilder component
//
function FormBuilder() {
  const [title, setTitle] = useState('');
  const [fields, setFields] = useState([]);

  // Add a new field of the chosen type
  const handleAddField = (type) => {
    setFields((prev) => [
      ...prev,
      {
        id: uuidv4(),
        type,
        label: `Untitled ${type} question`,
        // If it's a 'select' type, we keep an options array. Otherwise undefined.
        options: type === 'select' ? [] : undefined,
      },
    ]);
  };

  // Reordering logic with dnd-kit
  const handleDragEnd = (event) => {
    const { active, over } = event;
    if (!over) return;
    if (active.id !== over.id) {
      const oldIndex = fields.findIndex((f) => f.id === active.id);
      const newIndex = fields.findIndex((f) => f.id === over.id);
      setFields((items) => arrayMove(items, oldIndex, newIndex));
    }
  };

  //
  // Each item in the list is "sortable." This is the component for rendering each field.
  //
  function SortableItem({ field }) {
    const {
      attributes,
      listeners,
      setNodeRef,
      transform,
      transition,
    } = useSortable({ id: field.id });

    // Inline styles for the drag movement/animation
    const style = {
      transform: `translate3d(${transform?.x ?? 0}px, ${transform?.y ?? 0}px, 0)`,
      transition,
      padding: '8px',
      border: '1px solid #ccc',
      marginBottom: '8px',
      background: '#fff',
    };

    return (
      <div ref={setNodeRef} style={style} {...attributes} {...listeners}>
        {/* A text input to edit the question LABEL */}
        <input
          type="text"
          value={field.label}
          onChange={(e) => {
            const val = e.target.value;
            setFields((prev) =>
              prev.map((f) => (f.id === field.id ? { ...f, label: val } : f))
            );
          }}
          style={{ display: 'block', marginBottom: '8px', width: '100%' }}
        />

        {/* If it's a SELECT type, show a textarea for options */}
        {field.type === 'select' && (
          <textarea
            placeholder="Comma-separated options..."
            value={(field.options || []).join(',')}
            onChange={(e) => {
              const opts = e.target.value.split(',');
              setFields((prev) =>
                prev.map((f) => (f.id === field.id ? { ...f, options: opts } : f))
              );
            }}
            style={{ display: 'block', marginBottom: '8px', width: '100%' }}
          />
        )}

        {/* If it's a FILE type, optionally show a disabled file input or a placeholder */}
        {field.type === 'file' && (
          <div style={{ marginBottom: '8px' }}>
            <p style={{ margin: '0 0 4px' }}>
              This is a "File Upload" question. (Preview only)
            </p>
            <input type="file" disabled style={{ opacity: 0.7 }} />
          </div>
        )}

        {/* Delete button to remove the field */}
        <button
          style={{ color: 'red' }}
          onClick={() => setFields((prev) => prev.filter((q) => q.id !== field.id))}
        >
          Delete
        </button>
      </div>
    );
  }

  // Save form to your backend (placeholder)
  const handleSave = async () => {
    const formSchema = { title, fields };

    // Typically you'd POST to .NET or store in a DB. For demo, just log it.
    console.log('Saving form schema:', formSchema);

    // You might get an ID back from the backend; we mock it here:
    const mockId = uuidv4();
    alert(`Form saved! Link: http://localhost:3000/forms/${mockId}`);
  };

  return (
    <div style={{ display: 'flex', gap: '2rem', padding: '1rem' }}>
      {/* Toolbox */}
      <div>
        <h2>Form Title</h2>
        <input
          style={{ display: 'block', marginBottom: '1rem' }}
          value={title}
          onChange={(e) => setTitle(e.target.value)}
        />
        <h3>Add Question Types</h3>
        {questionTypes.map((qt) => (
          <button
            key={qt.type}
            onClick={() => handleAddField(qt.type)}
            style={{ display: 'block', margin: '4px 0' }}
          >
            {qt.label}
          </button>
        ))}
        <button onClick={handleSave} style={{ marginTop: '1rem' }}>
          Save Form
        </button>
      </div>

      {/* Form Canvas (drag-and-drop area) */}
      <div style={{ flex: 1 }}>
        <h2>Form Canvas</h2>
        <DndContext collisionDetection={closestCenter} onDragEnd={handleDragEnd}>
          <SortableContext items={fields} strategy={verticalListSortingStrategy}>
            {fields.map((field) => (
              <SortableItem key={field.id} field={field} />
            ))}
          </SortableContext>
        </DndContext>
      </div>
    </div>
  );
}

export default FormBuilder;

================
File: src/routes/FormFill.jsx
================
// src/routes/FormFill.jsx
import React, { useEffect, useState } from 'react';
import { useParams } from 'react-router-dom';

function FormFill() {
  const { id } = useParams();
  const [form, setForm] = useState(null);
  const [answers, setAnswers] = useState({});
  const [fileUploads, setFileUploads] = useState({});

  useEffect(() => {
    // In a real app, we'd GET /api/forms/:id
    // For now, mock some form schema:
    const mockForm = {
      id,
      schema: {
        title: 'Mock Form Title',
        fields: [
          { id: 'q1', type: 'text', label: 'Your Name' },
          { id: 'q2', type: 'select', label: 'Favorite Color', options: ['Red', 'Green', 'Blue'] },
          { id: 'q3', type: 'file', label: 'Upload a File' },
        ],
      },
    };
    setForm(mockForm);
  }, [id]);

  const handleFileChange = (questionId, file) => {
    setFileUploads((prev) => ({ ...prev, [questionId]: file }));
  };

  const handleSubmit = async () => {
    let finalAnswers = { ...answers };

    // For each file, upload to .NET which pushes to Azure
    for (const [qId, file] of Object.entries(fileUploads)) {
      if (!file) continue;
      const uploadedUrl = await mockUploadToAzure(file);
      finalAnswers[qId] = uploadedUrl;
    }

    // Then POST finalAnswers to /api/forms/:id/responses
    console.log('Submitting to backend:', finalAnswers);
    alert('Form submitted!');
    setAnswers({});
    setFileUploads({});
  };

  // Mock function to show concept of uploading to Azure
  const mockUploadToAzure = async (file) => {
    // In reality, you'd do something like:
    // let formData = new FormData();
    // formData.append('file', file);
    // const res = await fetch('http://localhost:5000/api/uploads', { method: 'POST', body: formData });
    // const data = await res.json();
    // return data.fileUrl;
    return Promise.resolve('https://fakeazure.blob.core.windows.net/.../' + file.name);
  };

  if (!form) return <div>Loading form...</div>;

  const { schema } = form;
  return (
    <div style={{ margin: '2rem' }}>
      <h1>{schema.title}</h1>
      {schema.fields.map((field) => {
        const qId = field.id;
        switch (field.type) {
          case 'text':
            return (
              <div key={qId} style={{ marginBottom: '1rem' }}>
                <label>{field.label}</label><br />
                <input
                  type="text"
                  value={answers[qId] || ''}
                  onChange={(e) =>
                    setAnswers((prev) => ({ ...prev, [qId]: e.target.value }))
                  }
                />
              </div>
            );
          case 'textarea':
            return (
              <div key={qId} style={{ marginBottom: '1rem' }}>
                <label>{field.label}</label><br />
                <textarea
                  rows="4"
                  value={answers[qId] || ''}
                  onChange={(e) =>
                    setAnswers((prev) => ({ ...prev, [qId]: e.target.value }))
                  }
                />
              </div>
            );
          case 'select':
            return (
              <div key={qId} style={{ marginBottom: '1rem' }}>
                <label>{field.label}</label><br />
                <select
                  value={answers[qId] || ''}
                  onChange={(e) =>
                    setAnswers((prev) => ({ ...prev, [qId]: e.target.value }))
                  }
                >
                  <option value="">--Select--</option>
                  {(field.options || []).map((opt, idx) => (
                    <option key={idx} value={opt.trim()}>
                      {opt.trim()}
                    </option>
                  ))}
                </select>
              </div>
            );
          case 'file':
            return (
              <div key={qId} style={{ marginBottom: '1rem' }}>
                <label>{field.label}</label><br />
                <input
                  type="file"
                  onChange={(e) => handleFileChange(qId, e.target.files[0])}
                />
              </div>
            );
          default:
            return null;
        }
      })}
      <button onClick={handleSubmit}>Submit</button>
    </div>
  );
}

export default FormFill;

================
File: src/setupTests.js
================
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';
